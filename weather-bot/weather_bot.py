import requests
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)

BOT_TOKEN = "8121284557:AAGbNf3gx-01ky9eMvvDz1lBzeaVVSYy8YU"
WEATHER_API_KEY = "1f05fee41cdd2b188dab20e93e39d633"

WAITING_FOR_CITY = 1
user_settings = {}

def get_weather(city):
    url = "http://api.openweathermap.org/data/2.5/weather"
    params = {"q": city, "appid": WEATHER_API_KEY, "units": "metric", "lang": "ru"}
    r = requests.get(url, params=params)
    data = r.json()
    if data.get("cod") != 200:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
    temp = data["main"]["temp"]
    feels = data["main"]["feels_like"]
    desc = data["weather"][0]["description"].capitalize()
    humidity = data["main"]["humidity"]
    wind = data["wind"]["speed"]
    return (f"üå¶ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels}¬∞C)\n"
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {desc}\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"–í–µ—Ç–µ—Ä: {wind} –º/—Å")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_settings[user_id] = {"city": "–°–∏–≥–∞–µ–≤–æ, –£–¥–º—É—Ä—Ç—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞", "auto_update": False, "task": None}
    keyboard = [["üåç –ù–∞–π—Ç–∏ –≥–æ—Ä–æ–¥", "üå§ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞", "üîÅ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–≤–∫–ª/–≤—ã–∫–ª)"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    weather_info = get_weather(user_settings[user_id]["city"])
    await update.message.reply_text(f"üëã –ü—Ä–∏–≤–µ—Ç!\n\n{weather_info}", reply_markup=reply_markup)

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    user = user_settings.get(user_id)
    if text == "üåç –ù–∞–π—Ç–∏ –≥–æ—Ä–æ–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        return WAITING_FOR_CITY
    if text == "üå§ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞":
        if not user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start.")
        else:
            weather_info = get_weather(user["city"])
            await update.message.reply_text(f"üå§ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ {user['city']}:\n\n{weather_info}")
        return ConversationHandler.END
    if text == "üîÅ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–≤–∫–ª/–≤—ã–∫–ª)":
        if not user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start.")
            return ConversationHandler.END
        if user["auto_update"]:
            user["auto_update"] = False
            if user["task"]:
                user["task"].cancel()
                user["task"] = None
            await update.message.reply_text("‚õîÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
        else:
            user["auto_update"] = True
            user["task"] = asyncio.create_task(auto_update_weather(update, context))
            await update.message.reply_text("‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ (–∫–∞–∂–¥—ã–π —á–∞—Å).")
    return ConversationHandler.END

async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    city = update.message.text
    user_settings[user_id]["city"] = city
    weather_info = get_weather(city)
    await update.message.reply_text(f"‚úÖ –ì–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {city}.\n\n{weather_info}")
    return ConversationHandler.END

async def auto_update_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    while user_settings[user_id]["auto_update"]:
        city = user_settings[user_id]["city"]
        weather_info = get_weather(city)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚è∞ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n\n{weather_info}")
        await asyncio.sleep(3600)

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = user_settings.get(user_id)
    if user and user["task"]:
        user["task"].cancel()
    user_settings[user_id] = {"auto_update": False, "task": None}
    await update.message.reply_text("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.")

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons)],
        states={WAITING_FOR_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_city)]},
        fallbacks=[]
    )
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(conv_handler)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()